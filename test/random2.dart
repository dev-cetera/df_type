// --- Generated by Grok 3 ---

// ignore_for_file: deprecated_member_use_from_same_package

import 'dart:async';
import 'package:test/test.dart';
import 'package:df_type/df_type.dart';

enum TestEnum { one, two, three }

void main() {
  group('Supplemental Type Conversion Utilities', () {
    test('letMapOrNull with nested JSON string', () {
      final input = '{"user": {"name": "Alice", "age": "30"}, "active": true}';
      final result = letMapOrNull<String, dynamic>(input);
      expect(result, {
        'user': {'name': 'Alice', 'age': '30'},
        'active': true
      });
    });

    test('letMapOrNull with integer keys', () {
      final input = {1: 'one', 2: 'two'};
      final result = letMapOrNull<int, String>(input);
      expect(result, {1: 'one', 2: 'two'});
    });

    test('letListOrNull with CSV containing spaces and mixed types', () {
      expect(letListOrNull<int>('1, two, 3 ,4', filterNulls: true), [1, 3, 4]);
      expect(letListOrNull<int>('1, two, 3 ,4', nullFallback: 0), [1, 0, 3, 4]);
      expect(letListOrNull<int>('1, two, 3 ,4', filterNulls: true), [1, 3, 4]);
    });

    test('letEnumOrNull with edge cases', () {
      expect(letEnumOrNull(' ONE ', TestEnum.values), TestEnum.one);
      expect(letEnumOrNull('', TestEnum.values), isNull);
      expect(letEnumOrNull(null, TestEnum.values), isNull);
    });
  });

  group('Supplemental DeepGet Utilities', () {
    test('deepGet with numeric keys and indices', () {
      final data = {
        1: 'one',
        'list': [0, 1, 2],
        'map': {1: 'int key', '1': 'string key'}
      };
      expect(data.deepGet<String>('1'), isNull); // String '1' not found
      expect(data.deepGetFromSegments<String>([1]), 'one'); // Integer key
      expect(data.deepGet<int>('list.1'), 1); // List index
      expect(data.deepGet<String>('map.1'), 'string key'); // String key
    });

    test('deepGet with nested mixed structures', () {
      final data = {
        'data': [
          {
            'values': [10, 20, 30]
          },
          {
            'values': {'key': 'nested'}
          }
        ]
      };
      expect(data.deepGet<int>('data.0.values.1'), 20);
      expect(data.deepGet<String>('data.1.values.key'), 'nested');
    });
  });

  group('Supplemental Asynchronous Helpers', () {
    test('consec with error handling', () async {
      var errorCaught = false;
      await expectLater(
        () => consec(
          // ignore: inference_failure_on_instance_creation
          Future.error('test error'),
          (a) => a.toString(),
          onError: (e, s) {
            expect(e, 'test error');
            errorCaught = true;
          },
        ),
        throwsA('test error'),
      );
      expect(errorCaught, isTrue);
    });

    test('Waiter with mixed Future and non-Future operations', () async {
      final waiter = Waiter<int>();
      waiter.add(() => 1);
      waiter.add(() => Future.value(2));
      waiter.add(() async => 3);
      final results = await waiter.wait();
      expect(results, orderedEquals([1, 2, 3]));
    });
  });

  group('Deprecated Utilities', () {
    test('StreamHelper firstToFuture', () async {
      final stream = Stream.fromIterable([1, 2, 3]);
      expect(await StreamHelper.i.firstToFuture(stream), 1);
    });

    test('DateTimeHelper median', () {
      final dates = [DateTime(2023, 1, 1), DateTime(2023, 1, 3), DateTime(2023, 1, 2)];
      final result = DateTimeHelper.i.median(dates);
      expect(result, DateTime(2023, 1, 2));
    });

    test('StringToDurationConverter with milliseconds', () {
      final converter = StringToDurationConverter('01:02:03.456');
      expect(
        converter.toDurationOrNull(),
        Duration(hours: 1, minutes: 2, seconds: 3, milliseconds: 456),
      );
    });
  });
}
